import React, { useState, useEffect } from 'react';
import ErrorBoundary from '../components/common/ErrorBoundary';
import Toast from '../components/common/Toast';
import LoadingSpinner from '../components/common/LoadingSpinner';
import Header from '../components/layout/Header';
import Footer from '../components/layout/Footer';
import SettingsModal from '../components/modals/SettingsModal';
import NotificationsModal from '../components/modals/NotificationsModal';
import AddStaffModal from '../components/modals/AddStaffModal';
import AddTourModal from '../components/modals/AddTourModal';
import StaffDetailsModal from '../components/modals/StaffDetailsModal';
import ShiftModal from '../components/modals/ShiftModal';
import ReplacementModal from '../components/modals/ReplacementModal';
import ScheduleView from '../components/views/ScheduleView';
import StaffView from '../components/views/StaffView';
import ToursView from '../components/views/ToursView';
import AnalyticsView from '../components/views/AnalyticsView';
import AIView from '../components/views/AIView';
import { useApi } from '../hooks/useApi';
import { Schedule, Shift, Staff, Tour, NotificationItem, UserProfile, Toast as ToastType } from '../types';
import { Icons } from '../components/common/Icons';

const VaktAI: React.FC = () => {
  // State management
  const [activeView, setActiveView] = useState<'schedule' | 'staff' | 'tours' | 'analytics' | 'ai'>('schedule');
  const [currentDate, setCurrentDate] = useState<Date>(new Date());
  const [selectedWeek, setSelectedWeek] = useState<number>(getCurrentWeekNumber());
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [toasts, setToasts] = useState<ToastType[]>([]);
  const [toastIdCounter, setToastIdCounter] = useState<number>(1);
  
  // Modal states
  const [modals, setModals] = useState({
    settings: false,
    notifications: false,
    addStaff: false,
    addTour: false,
    staffDetails: null as Staff | null,
    editShift: null as Shift | null,
    sickCall: null as Staff | null,
    replacement: null as Staff | null,
    addShift: null as any
  });

  // API Hooks
  const { 
    fetchStaff, 
    fetchTours, 
    fetchSchedule, 
    fetchNotifications,
    fetchUserProfile,
    updateShift,
    deleteShift,
    fetchAnalytics,
    loading, 
    error 
  } = useApi();

  // Data state
  const [staff, setStaff] = useState<Staff[]>([]);
  const [tours, setTours] = useState<Tour[]>([]);
  const [schedule, setSchedule] = useState<Schedule | null>(null);
  const [shifts, setShifts] = useState<Shift[]>([]);
  const [notifications, setNotifications] = useState<NotificationItem[]>([]);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [unreadNotificationsCount, setUnreadNotificationsCount] = useState<number>(0);
  const [analytics, setAnalytics] = useState<any>({
    efficiency: 0,
    satisfaction: 0,
    coverage: 0,
    costs: 0
  });
  
  const [loadingState, setLoadingState] = useState({
    isLoading: false,
    message: '',
    progress: 0
  });

  // Load initial data
  useEffect(() => {
    loadData();
  }, []);

  // Count unread notifications
  useEffect(() => {
    const unreadCount = notifications.filter(n => !n.read).length;
    setUnreadNotificationsCount(unreadCount);
  }, [notifications]);

  const loadData = async () => {
    setIsLoading(true);
    try {
      // Load all necessary data in parallel
      const [staffData, toursData, scheduleData, notificationsData, profileData, analyticsData] = await Promise.all([
        fetchStaff(),
        fetchTours(),
        fetchSchedule(currentDate),
        fetchNotifications(),
        fetchUserProfile(),
        fetchAnalytics()
      ]);

      setStaff(staffData);
      setTours(toursData);
      setSchedule(scheduleData);
      setShifts(scheduleData?.shifts || []);
      setNotifications(notificationsData);
      setUserProfile(profileData);
      setAnalytics(analyticsData);
      
      // Show welcome toast
      addToast({
        id: 'welcome',
        message: 'Velkomin √≠ VaktAI vaktakerfi√∞',
        type: 'info',
        duration: 5000
      });
    } catch (err) {
      console.error('Error loading initial data:', err);
      addToast({
        id: 'error',
        message: 'Villa vi√∞ a√∞ s√¶kja g√∂gn. Reyndu aftur.',
        type: 'error',
        duration: 10000
      });
    } finally {
      setIsLoading(false);
    }
  };

  const refreshSchedule = async () => {
    try {
      const scheduleData = await fetchSchedule(currentDate);
      setSchedule(scheduleData);
      setShifts(scheduleData?.shifts || []);
    } catch (err) {
      console.error('Error refreshing schedule:', err);
    }
  };

  function getCurrentWeekNumber() {
    const now = new Date();
    const start = new Date(now.getFullYear(), 0, 1);
    const diff = now.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const day = Math.floor(diff / oneDay);
    return Math.ceil(day / 7);
  }

  const handleDateChange = (date: Date) => {
    setCurrentDate(date);
    refreshSchedule();
  };

  const addToast = (toast: ToastType) => {
    const newToast = { ...toast, id: toast.id || `toast-${toastIdCounter}` };
    setToasts(prevToasts => [...prevToasts, newToast]);
    setToastIdCounter(prev => prev + 1);
    
    // Auto-remove toast after duration
    if (toast.duration) {
      setTimeout(() => {
        removeToast(newToast.id);
      }, toast.duration);
    }
  };

  const removeToast = (id: string) => {
    setToasts(prevToasts => prevToasts.filter(toast => toast.id !== id));
  };

  const handleStaffChange = (updatedStaff: any[]) => {
    setStaff(updatedStaff);
  };

  const handleToursChange = (updatedTours: any[]) => {
    setTours(updatedTours);
  };

  const renderActiveView = () => {
    switch (activeView) {
      case 'schedule':
        return (
          <ScheduleView 
            date={currentDate}
            onDateChange={handleDateChange}
            staff={staff}
          />
        );
      case 'staff':
        return (
          <StaffView 
            onStaffChange={handleStaffChange}
          />
        );
      case 'tours':
        return (
          <ToursView 
            onToursChange={handleToursChange}
          />
        );
      case 'analytics':
        return (
          <AnalyticsView 
            startDate={new Date(new Date().setDate(new Date().getDate() - 30))}
            endDate={new Date()}
          />
        );
      case 'ai':
        return (
          <AIView 
            staffCount={staff.length}
            tourCount={tours.length}
          />
        );
      default:
        return null;
    }
  };

  return (
    <ErrorBoundary>
      <div className="vakt-ai-app">
        <Header 
          user={userProfile}
          notificationsCount={unreadNotificationsCount}
          onNotificationsClick={() => setIsNotificationsModalOpen(true)}
          onSettingsClick={() => setIsSettingsModalOpen(true)}
        />
        
        <div className="main-container">
          <nav className="sidebar">
            <div className="logo">
              <img src="/logo.svg" alt="VaktAI" />
              <h1>VaktAI</h1>
            </div>
            
            <ul className="nav-items">
              <li 
                className={`nav-item ${activeView === 'schedule' ? 'active' : ''}`}
                onClick={() => setActiveView('schedule')}
              >
                <span className="icon">üìÖ</span>
                <span className="label">Schedule</span>
              </li>
              <li 
                className={`nav-item ${activeView === 'staff' ? 'active' : ''}`}
                onClick={() => setActiveView('staff')}
              >
                <span className="icon">üë•</span>
                <span className="label">Staff</span>
              </li>
              <li 
                className={`nav-item ${activeView === 'tours' ? 'active' : ''}`}
                onClick={() => setActiveView('tours')}
              >
                <span className="icon">üöå</span>
                <span className="label">Tours</span>
              </li>
              <li 
                className={`nav-item ${activeView === 'analytics' ? 'active' : ''}`}
                onClick={() => setActiveView('analytics')}
              >
                <span className="icon">üìä</span>
                <span className="label">Analytics</span>
              </li>
              <li 
                className={`nav-item ${activeView === 'ai' ? 'active' : ''}`}
                onClick={() => setActiveView('ai')}
              >
                <span className="icon">ü§ñ</span>
                <span className="label">AI Assistant</span>
              </li>
            </ul>
            
            <div className="sidebar-footer">
              <button className="help-button">
                <span className="icon">‚ùì</span>
                <span className="label">Help</span>
              </button>
            </div>
          </nav>
          
          <main className="content">
            {loading && <LoadingSpinner size={60} message="Loading data..." />}
            
            {!loading && error && (
              <div className="error-message">
                <h3>Error</h3>
                <p>{error}</p>
                <button onClick={loadData}>Try Again</button>
              </div>
            )}
            
            {!loading && !error && renderActiveView()}
          </main>
        </div>
        
        <Footer />
        
        {/* Modals */}
        {isSettingsModalOpen && (
          <SettingsModal
            onClose={() => setIsSettingsModalOpen(false)}
            userProfile={userProfile}
          />
        )}
        
        {isNotificationsModalOpen && (
          <NotificationsModal
            notifications={notifications}
            onClose={() => setIsNotificationsModalOpen(false)}
          />
        )}
        
        {/* Toast Notifications */}
        <div className="toast-container">
          {toasts.map(toast => (
            <Toast
              key={toast.id}
              message={toast.message}
              type={toast.type}
              onClose={() => removeToast(toast.id)}
              actions={toast.actions}
            />
          ))}
        </div>
      </div>
    </ErrorBoundary>
  );
};

export default VaktAI;
  ]);

  const [selectedWeek, setSelectedWeek] = useState(21);
  const [currentView, setCurrentView] = useState('schedule');
  const [searchQuery, setSearchQuery] = useState('');
  const [toasts, setToasts] = useState<ToastType[]>([]);
  const [loadingState, setLoadingState] = useState<LoadingState>({
    isLoading: false,
    message: '',
    progress: 0
  });

  const [modals, setModals] = useState({
    settings: false,
    notifications: false,
    addStaff: false,
    addTour: false,
    staffDetails: null as Staff | null,
    editShift: null as Shift | null,
    sickCall: null as Staff | null,
    replacement: null as Staff | null,
    addShift: null as any
  });

  const [analytics, setAnalytics] = useState<Analytics>({
    efficiency: 0,
    satisfaction: 0,
    coverage: 0,
    costs: 0
  });

  const [weather, setWeather] = useState<Weather | null>(null);

  useEffect(() => {
    console.log('üöÄ VaktAI v3.0 initialized', {
      staff: staff.length,
      shifts: shifts.length,
      tours: tours.length,
      apiEndpoints: Object.keys(API_CONFIG).length
    });
    
    const fetchWeather = async () => {
      try {
        const response = await apiCall(API_CONFIG.WEATHER_ENDPOINT);
        setWeather(response.data);
      } catch (error) {
        console.error('Failed to fetch weather:', error);
      }
    };

    fetchWeather();
    const interval = setInterval(fetchWeather, 300000);
    
    const checkAPIConnectivity = async () => {
      try {
        const analyticsResponse = await apiCall(API_CONFIG.ANALYTICS_ENDPOINT);
        if (analyticsResponse.success) {
          console.log('‚úÖ API connectivity confirmed');
        }
      } catch (error) {
        console.error('‚ö†Ô∏è API connectivity check failed:', error);
      }
    };
    
    checkAPIConnectivity();
    
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const fetchAnalytics = async () => {
      try {
        const response = await apiCall(API_CONFIG.ANALYTICS_ENDPOINT);
        setAnalytics(response.data);
      } catch (error) {
        console.error('Failed to fetch analytics:', error);
      }
    };

    fetchAnalytics();
  }, [shifts, staff]);

  const showToast = (message: string, type: ToastType['type'] = 'info', actions: ToastType['actions'] = []) => {
    const toast: ToastType = {
      id: Date.now(),
      message,
      type,
      actions
    };
    setToasts(prev => [...prev, toast]);
  };

  const removeToast = (id: number) => {
    setToasts(prev => prev.filter(t => t.id !== id));
  };

  const handleAddStaff = (newStaff: Staff) => {
    setStaff(prev => [...prev, newStaff]);
    showToast(`${newStaff.fullName || newStaff.name} hefur veri√∞ b√¶tt vi√∞!`, 'success');
  };

  const handleReportSick = async (staffMember: Staff) => {
    setLoadingState({
      isLoading: true,
      message: 'Tilkynnir veikindi...',
      progress: 50
    });

    try {
      await apiCall(API_CONFIG.SICK_CALL_ENDPOINT, {
        staffId: staffMember.id,
        date: new Date().toISOString()
      });

      setStaff(prev => prev.map(s => 
        s.id === staffMember.id ? { ...s, sick: true } : s
      ));

      setModals(prev => ({ ...prev, replacement: staffMember }));

      showToast(
        `Veikindi ${staffMember.name} hafa veri√∞ skr√°√∞`,
        'warning',
        [
          { label: 'Finna sta√∞gengil', onClick: () => setModals(prev => ({ ...prev, replacement: staffMember })) },
          { label: 'H√¶tta vi√∞', onClick: () => cancelSickReport(staffMember) }
        ]
      );
    } catch (error) {
      showToast('Villa vi√∞ a√∞ tilkynna veikindi', 'error');
    } finally {
      setLoadingState({ isLoading: false, message: '', progress: 0 });
    }
  };

  const cancelSickReport = (staffMember: Staff) => {
    setStaff(prev => prev.map(s => 
      s.id === staffMember.id ? { ...s, sick: false } : s
    ));
    showToast('Veikindatilkynning afturk√∂llu√∞', 'info');
  };

  const handleAddTour = (newTour: Tour) => {
    setTours(prev => [...prev, newTour]);
    showToast(`Fer√∞ "${newTour.name}" hefur veri√∞ b√¶tt vi√∞!`, 'success');
  };

  const handleEditTour = (tourId: number) => {
    const tour = tours.find(t => t.id === tourId);
    if (tour) {
      showToast(`Breytir fer√∞: ${tour.name}`, 'info');
      console.log('Edit tour:', tour);
    }
  };

  const handleAssignTour = (tourId: number) => {
    const tour = tours.find(t => t.id === tourId);
    if (tour) {
      showToast(`√öthlutar starfsm√∂nnum √≠ fer√∞: ${tour.name}`, 'info');
      console.log('Assign staff to tour:', tour);
    }
  };

  const handleAddShift = (shiftData: Shift) => {
    setShifts(prev => [...prev, shiftData]);
    showToast('Vakt hefur veri√∞ b√¶tt vi√∞', 'success');
  };

  const handleEditShift = (shiftData: Shift) => {
    setShifts(prev => prev.map(s => s.id === shiftData.id ? shiftData : s));
    showToast('Vakt hefur veri√∞ uppf√¶r√∞', 'success');
  };

  const handleDeleteShift = (shift: Shift) => {
    setShifts(prev => prev.filter(s => s.id !== shift.id));
    showToast('Vakt hefur veri√∞ eytt', 'info');
  };

  const handleSubmitSchedule = () => {
    showToast('Vaktaplan hefur veri√∞ sta√∞fest og sent √° starfsf√≥lk', 'success');
  };

  const handleAIOptimize = async () => {
    setLoadingState({
      isLoading: true,
      message: 'AI er a√∞ b√∫a til bestu vakta√°√¶tlun...',
      progress: 0
    });

    const progressInterval = setInterval(() => {
      setLoadingState(prev => ({
        ...prev,
        progress: Math.min(prev.progress + 10, 90)
      }));
    }, 300);

    try {
      const response = await apiCall(API_CONFIG.AI_SCHEDULE_ENDPOINT, {
        staff: staff.filter(s => !s.sick),
        currentShifts: shifts,
        week: selectedWeek
      });

      clearInterval(progressInterval);
      setLoadingState(prev => ({ ...prev, progress: 100 }));

      setTimeout(() => {
        showToast(
          `AI hefur b√¶tt vaktaplani√∞! ${response.data.schedule.efficiency_gain}% skilvirkari`,
          'success',
          [
            { label: 'Sam√æykkja breytingar', onClick: () => applyAIChanges(response.data) },
            { label: 'Sko√∞a till√∂gur', onClick: () => viewAISuggestions(response.data) }
          ]
        );
        setLoadingState({ isLoading: false, message: '', progress: 0 });
      }, 500);
    } catch (error) {
      clearInterval(progressInterval);
      showToast('Villa vi√∞ a√∞ b√∫a til AI vaktaplan', 'error');
      setLoadingState({ isLoading: false, message: '', progress: 0 });
    }
  };

  const applyAIChanges = (aiData: any) => {
    if (aiData.schedule.suggestions) {
      aiData.schedule.suggestions.forEach((suggestion: any) => {
        setShifts(prev => prev.map(shift => 
          shift.staffId === suggestion.staffId && shift.day === suggestion.day
            ? { ...shift, type: suggestion.to }
            : shift
        ));
      });
    }
    showToast('AI breytingar hafa veri√∞ framkv√¶mdar', 'success');
  };

  const viewAISuggestions = (aiData: any) => {
    const suggestions = aiData.schedule.suggestions || [];
    let message = 'ü§ñ AI Till√∂gur til a√∞ b√¶ta vaktaplani√∞:\n\n';
    
    suggestions.forEach((s: any, index: number) => {
      const staffMember = staff.find(st => st.id === s.staffId);
      message += `${index + 1}. F√¶ra ${staffMember?.name || 'starfsmann'} √∫r ${s.from} √≠ ${s.to} √° ${s.day}\n`;
    });
    
    message += `\n‚ú® √ûetta mun auka skilvirkni um ${aiData.schedule.efficiency_gain}%`;
    message += `\nüîß ${aiData.schedule.conflicts_resolved} √°rekstrar leystir`;
    message += `\nüìä ${aiData.schedule.changes} breytingar ger√∞ar`;
    
    showToast(message, 'info', [
      { label: '‚úÖ Sam√æykkja allar', onClick: () => applyAIChanges(aiData) },
      { label: '‚ùå Hafna', onClick: () => showToast('AI till√∂gum hafna√∞', 'info') }
    ]);
  };

  const handleExport = async (format: string) => {
    setLoadingState({
      isLoading: true,
      message: `√ötflytjir √≠ ${format.toUpperCase()} sni√∞i...`,
      progress: 50
    });

    try {
      await apiCall(API_CONFIG.EXPORT_ENDPOINT, {
        format,
        data: { staff, shifts, week: selectedWeek }
      });

      setTimeout(() => {
        showToast(`Vaktaplan hefur veri√∞ flutt √∫t sem ${format.toUpperCase()}`, 'success');
        setLoadingState({ isLoading: false, message: '', progress: 0 });
      }, 1000);
    } catch (error) {
      showToast('Villa vi√∞ √∫tflutning', 'error');
      setLoadingState({ isLoading: false, message: '', progress: 0 });
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const handleNextWeek = () => {
    setSelectedWeek(prev => prev + 1);
    showToast(`F√¶r√∞i √≠ viku ${selectedWeek + 1}`, 'info');
  };

  const handlePreviousWeek = () => {
    setSelectedWeek(prev => Math.max(prev - 1, 1));
    showToast(`F√¶r√∞i √≠ viku ${Math.max(selectedWeek - 1, 1)}`, 'info');
  };

  const filteredStaff = staff.filter(s =>
    s.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    s.role.toLowerCase().includes(searchQuery.toLowerCase()) ||
    s.department.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const stats = {
    totalStaff: staff.length,
    activeStaff: staff.filter(s => !s.sick).length,
    sickStaff: staff.filter(s => s.sick).length,
    totalShifts: shifts.length
  };

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
        <Header 
          weather={weather}
          onOpenSettings={() => setModals(prev => ({ ...prev, settings: true }))}
          onOpenNotifications={() => setModals(prev => ({ ...prev, notifications: true }))}
        />

        <div className="bg-white shadow-md sticky top-0 z-40 no-print">
          <div className="container mx-auto px-4">
            <div className="flex space-x-1">
              {[
                { id: 'schedule', label: 'Vaktaplan', icon: Icons.Calendar },
                { id: 'staff', label: 'Starfsf√≥lk', icon: Icons.Users },
                { id: 'tours', label: 'Fer√∞ir', icon: Icons.MapPin },
                { id: 'analytics', label: 'T√∂lfr√¶√∞i', icon: Icons.TrendingUp },
                { id: 'ai', label: 'AI A√∞sto√∞', icon: Icons.Brain }
              ].map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setCurrentView(tab.id)}
                  className={`flex items-center space-x-2 px-6 py-4 font-medium transition-all border-b-4 ${
                    currentView === tab.id
                      ? 'text-blue-600 border-blue-600 bg-blue-50'
                      : 'text-gray-600 border-transparent hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  <tab.icon className="w-5 h-5" />
                  <span>{tab.label}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        <main className="container mx-auto px-4 py-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8 no-print">
            <div className="bg-white rounded-xl shadow-lg p-6 transform hover:scale-105 transition-all">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Starfsf√≥lk alls</p>
                  <p className="text-3xl font-bold text-gray-900">{stats.totalStaff}</p>
                  <p className="text-xs text-green-600 mt-1">+2 fr√° s√≠√∞ustu viku</p>
                </div>
                <div className="p-4 bg-blue-100 rounded-full">
                  <Icons.Users className="w-8 h-8 text-blue-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6 transform hover:scale-105 transition-all">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Virkir √≠ dag</p>
                  <p className="text-3xl font-bold text-green-600">{stats.activeStaff}</p>
                  <p className="text-xs text-gray-600 mt-1">{((stats.activeStaff / stats.totalStaff) * 100).toFixed(0)}% m√¶tt</p>
                </div>
                <div className="p-4 bg-green-100 rounded-full">
                  <Icons.Check className="w-8 h-8 text-green-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6 transform hover:scale-105 transition-all">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Veikindi</p>
                  <p className="text-3xl font-bold text-red-600">{stats.sickStaff}</p>
                  <p className="text-xs text-orange-600 mt-1">‚ö†Ô∏è √ûarf sta√∞gengla</p>
                </div>
                <div className="p-4 bg-red-100 rounded-full">
                  <Icons.AlertTriangle className="w-8 h-8 text-red-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6 transform hover:scale-105 transition-all">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Skilvirkni</p>
                  <p className="text-3xl font-bold text-purple-600">{analytics.efficiency}%</p>
                  <p className="text-xs text-purple-600 mt-1">‚Üë {analytics.efficiency - 90}% b√¶ting</p>
                </div>
                <div className="p-4 bg-purple-100 rounded-full">
                  <Icons.Zap className="w-8 h-8 text-purple-600" />
                </div>
              </div>
            </div>
          </div>

          {currentView === 'schedule' && (
            <ScheduleView
              staff={filteredStaff}
              shifts={shifts}
              selectedWeek={selectedWeek}
              onAddShift={(staff, day) => setModals(prev => ({ ...prev, addShift: { staff, day } }))}
              onEditShift={(shift) => setModals(prev => ({ ...prev, editShift: shift }))}
              onDeleteShift={handleDeleteShift}
              onSubmitSchedule={handleSubmitSchedule}
              onFindReplacement={(sickStaff) => setModals(prev => ({ ...prev, replacement: sickStaff }))}
              onAIOptimize={handleAIOptimize}
              onNextWeek={handleNextWeek}
              onPreviousWeek={handlePreviousWeek}
              onExport={handleExport}
              onPrint={handlePrint}
            />
          )}

          {currentView === 'staff' && (
            <StaffView
              staff={filteredStaff}
              shifts={shifts}
              searchQuery={searchQuery}
              onSearchChange={setSearchQuery}
              onAddStaff={() => setModals(prev => ({ ...prev, addStaff: true }))}
              onViewStaff={(staff) => setModals(prev => ({ ...prev, staffDetails: staff }))}
              onReportSick={handleReportSick}
            />
          )}

          {currentView === 'tours' && (
            <ToursView
              tours={tours}
              onAddTour={() => setModals(prev => ({ ...prev, addTour: true }))}
              onEditTour={handleEditTour}
              onAssignTour={handleAssignTour}
            />
          )}

          {currentView === 'analytics' && (
            <AnalyticsView analytics={analytics} shifts={shifts} />
          )}

          {currentView === 'ai' && (
            <AIView onSuggestion={(suggestion) => console.log('AI Suggestion:', suggestion)} />
          )}
        </main>

        <SettingsModal
          isOpen={modals.settings}
          onClose={() => setModals(prev => ({ ...prev, settings: false }))}
          onSave={(settings) => {
            console.log('Settings saved:', settings);
            showToast('Stillingar vista√∞ar', 'success');
          }}
        />

        <NotificationsModal
          isOpen={modals.notifications}
          onClose={() => setModals(prev => ({ ...prev, notifications: false }))}
        />

        <AddStaffModal
          isOpen={modals.addStaff}
          onClose={() => setModals(prev => ({ ...prev, addStaff: false }))}
          onAddStaff={handleAddStaff}
        />

        <AddTourModal
          isOpen={modals.addTour}
          onClose={() => setModals(prev => ({ ...prev, addTour: false }))}
          onAddTour={handleAddTour}
        />

        {modals.staffDetails && (
          <StaffDetailsModal
            isOpen={true}
            onClose={() => setModals(prev => ({ ...prev, staffDetails: null }))}
            staff={modals.staffDetails}
            onReportSick={handleReportSick}
            onEditStaff={(staff) => {
              console.log('Edit staff:', staff);
              showToast('Uppl√Ωsingar uppf√¶r√∞ar', 'success');
            }}
            onDeleteStaff={(staff) => {
              setStaff(prev => prev.filter(s => s.id !== staff.id));
              setModals(prev => ({ ...prev, staffDetails: null }));
              showToast(`${staff.name} hefur veri√∞ fjarl√¶g√∞ur`, 'info');
            }}
          />
        )}

        {modals.editShift && (
          <ShiftModal
            isOpen={true}
            onClose={() => setModals(prev => ({ ...prev, editShift: null }))}
            onSave={handleEditShift}
            shift={modals.editShift}
            staff={staff}
          />
        )}

        {modals.addShift && (
          <ShiftModal
            isOpen={true}
            onClose={() => setModals(prev => ({ ...prev, addShift: null }))}
            onSave={handleAddShift}
            staff={staff}
            day={modals.addShift.day}
            staffMember={modals.addShift.staff}
          />
        )}

        {modals.replacement && (
          <ReplacementModal
            isOpen={true}
            onClose={() => setModals(prev => ({ ...prev, replacement: null }))}
            sickStaff={modals.replacement}
            shifts={shifts}
            staff={staff}
            onSelectReplacement={(replacement) => {
              showToast(`${replacement.name} hefur veri√∞ valinn sem sta√∞gengill`, 'success');
              setModals(prev => ({ ...prev, replacement: null }));
            }}
          />
        )}

        <LoadingSpinner
          isVisible={loadingState.isLoading}
          message={loadingState.message}
          progress={loadingState.progress}
        />

        <div className="fixed bottom-4 right-4 z-50 space-y-2">
          {toasts.map(toast => (
            <Toast
              key={toast.id}
              message={toast.message}
              type={toast.type}
              onClose={() => removeToast(toast.id)}
              actions={toast.actions}
            />
          ))}
        </div>

        <Footer />
      </div>

      <style jsx global>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes scaleIn {
          from {
            opacity: 0;
            transform: scale(0.95);
          }
          to {
            opacity: 1;
            transform: scale(1);
          }
        }
        
        @keyframes slideInUp {
          from {
            transform: translateY(100%);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        
        @keyframes slideOutDown {
          from {
            transform: translateY(0);
            opacity: 1;
          }
          to {
            transform: translateY(100%);
            opacity: 0;
          }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out;
        }
        
        .animate-scaleIn {
          animation: scaleIn 0.3s ease-out;
        }
        
        .animate-slideInUp {
          animation: slideInUp 0.5s ease-out;
        }
        
        .animate-slideOutDown {
          animation: slideOutDown 0.5s ease-out;
        }
        
        @media print {
          .no-print {
            display: none !important;
          }
          
          body {
            print-color-adjust: exact;
            -webkit-print-color-adjust: exact;
          }
        }
        
        ::-webkit-scrollbar {
          width: 8px;
          height: 8px;
        }
        
        ::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb {
          background: #888;
          border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
          background: #555;
        }
        
        .from-blue-50 { --tw-gradient-from: #eff6ff; }
        .from-green-50 { --tw-gradient-from: #f0fdf4; }
        .from-red-50 { --tw-gradient-from: #fef2f2; }
        .from-yellow-50 { --tw-gradient-from: #fefce8; }
        .from-purple-50 { --tw-gradient-from: #faf5ff; }
        .from-orange-50 { --tw-gradient-from: #fff7ed; }
        .from-cyan-50 { --tw-gradient-from: #ecfeff; }
        .from-pink-50 { --tw-gradient-from: #fdf2f8; }
        .from-emerald-50 { --tw-gradient-from: #ecfdf5; }
        .from-indigo-50 { --tw-gradient-from: #eef2ff; }
        
        .to-blue-100 { --tw-gradient-to: #dbeafe; }
        .to-green-100 { --tw-gradient-to: #dcfce7; }
        .to-red-100 { --tw-gradient-to: #fee2e2; }
        .to-yellow-100 { --tw-gradient-to: #fef3c7; }
        .to-purple-100 { --tw-gradient-to: #f3e8ff; }
        .to-orange-100 { --tw-gradient-to: #fed7aa; }
        .to-cyan-100 { --tw-gradient-to: #cffafe; }
        .to-pink-100 { --tw-gradient-to: #fce7f3; }
        .to-emerald-100 { --tw-gradient-to: #d1fae5; }
        .to-indigo-100 { --tw-gradient-to: #e0e7ff; }
        
        .text-blue-700 { color: #1d4ed8; }
        .text-green-700 { color: #15803d; }
        .text-red-700 { color: #b91c1c; }
        .text-yellow-700 { color: #a16207; }
        .text-purple-700 { color: #6b21a8; }
        .text-orange-700 { color: #c2410c; }
        .text-cyan-700 { color: #0e7490; }
        .text-pink-700 { color: #be185d; }
        .text-emerald-700 { color: #047857; }
        .text-indigo-700 { color: #4338ca; }
        
        .bg-yellow-200 { background-color: #fef08a; }
        .bg-blue-200 { background-color: #bfdbfe; }
        .bg-purple-200 { background-color: #e9d5ff; }
        
        .text-yellow-900 { color: #713f12; }
        .text-blue-900 { color: #1e3a8a; }
        .text-purple-900 { color: #581c87; }
        
        .border-yellow-300 { border-color: #fde047; }
        .border-blue-300 { border-color: #93c5fd; }
        .border-purple-300 { border-color: #d8b4fe; }
      `}</style>
    </ErrorBoundary>
  );
};

export default VaktAI;
